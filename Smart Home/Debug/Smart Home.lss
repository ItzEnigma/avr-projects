
Smart Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001038  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00001038  000010cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  0080006c  0080006c  000010d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003305  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001392  00000000  00000000  000048c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cdd  00000000  00000000  00005c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d18  00000000  00000000  00007930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010fd  00000000  00000000  00008648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020ca  00000000  00000000  00009745  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c0  00000000  00000000  0000b80f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_1>
       8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_2>
       c:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_3>
      10:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_4>
      14:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <__vector_5>
      18:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_6>
      1c:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__vector_7>
      20:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__vector_8>
      24:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__vector_9>
      28:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_10>
      2c:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_13>
      38:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_14>
      3c:	0c 94 dd 06 	jmp	0xdba	; 0xdba <__vector_15>
      40:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
      8a:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <startKeypad>:
		_delay_ms(500);
    }
}

void startKeypad(){
	DIO_vTogPin(PORTB_ID, PIN7_ID);
      92:	67 e0       	ldi	r22, 0x07	; 7
      94:	81 e0       	ldi	r24, 0x01	; 1
      96:	0e 94 6d 04 	call	0x8da	; 0x8da <DIO_vTogPin>
      9a:	08 95       	ret

0000009c <main>:
void startKeypad();


int main(void)
{
	TEMPS_vInit();
      9c:	0e 94 2d 03 	call	0x65a	; 0x65a <TEMPS_vInit>
	LCD_vInit();
      a0:	0e 94 80 02 	call	0x500	; 0x500 <LCD_vInit>
	KeyPad_vInit();
      a4:	0e 94 98 00 	call	0x130	; 0x130 <KeyPad_vInit>
	GIE_vEnableGlobaLInt();
      a8:	0e 94 3d 05 	call	0xa7a	; 0xa7a <GIE_vEnableGlobaLInt>
	EXTI_vInitINT0();
      ac:	0e 94 a1 04 	call	0x942	; 0x942 <EXTI_vInitINT0>
	EXTI_vReg_Func(startKeypad, INT0_ID);
      b0:	60 e0       	ldi	r22, 0x00	; 0
      b2:	89 e4       	ldi	r24, 0x49	; 73
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 b3 04 	call	0x966	; 0x966 <EXTI_vReg_Func>
	DIO_vSetPinDir(PORTB_ID, PIN7_ID, DIR_OUTPUT);
      ba:	41 e0       	ldi	r20, 0x01	; 1
      bc:	67 e0       	ldi	r22, 0x07	; 7
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
	
	u8 L_u8Char;
    while (1) 
    {	
		LCD_vSetPosition(ROW0_ID, COL0_ID);
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_vSetPosition>
		LCD_vDispNum(TEMPS_u8GetTemp());
      cc:	0e 94 30 03 	call	0x660	; 0x660 <TEMPS_u8GetTemp>
      d0:	28 2f       	mov	r18, r24
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	40 e0       	ldi	r20, 0x00	; 0
      d6:	50 e0       	ldi	r21, 0x00	; 0
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_vDispNum>
		LCD_vSetPosition(ROW1_ID, COL0_ID);
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_vSetPosition>
		LCD_vDispNum(LDR_u16GetValue());
      ec:	0e 94 10 03 	call	0x620	; 0x620 <LDR_u16GetValue>
      f0:	28 2f       	mov	r18, r24
      f2:	39 2f       	mov	r19, r25
      f4:	40 e0       	ldi	r20, 0x00	; 0
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_vDispNum>
		L_u8Char = KeyPad_u8GetPressedKey();
     104:	0e 94 b9 00 	call	0x172	; 0x172 <KeyPad_u8GetPressedKey>
     108:	c8 2f       	mov	r28, r24
	
		LCD_vSetPosition(ROW1_ID, COL6_ID);
     10a:	66 e0       	ldi	r22, 0x06	; 6
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_vSetPosition>
		if(L_u8Char != NO_PRESSED_KEY)
     112:	cf 3f       	cpi	r28, 0xFF	; 255
     114:	19 f0       	breq	.+6      	; 0x11c <main+0x80>
			LCD_vDispChar(L_u8Char);
     116:	8c 2f       	mov	r24, r28
     118:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_vDispChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     11c:	2f e9       	ldi	r18, 0x9F	; 159
     11e:	86 e8       	ldi	r24, 0x86	; 134
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	21 50       	subi	r18, 0x01	; 1
     124:	80 40       	sbci	r24, 0x00	; 0
     126:	90 40       	sbci	r25, 0x00	; 0
     128:	e1 f7       	brne	.-8      	; 0x122 <main+0x86>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x90>
     12c:	00 00       	nop
     12e:	ca cf       	rjmp	.-108    	; 0xc4 <main+0x28>

00000130 <KeyPad_vInit>:
#include "KeyPad_int.h"

#define F_CPU 8000000UL
#include <avr/delay.h>

void KeyPad_vInit(){
     130:	cf 93       	push	r28
	for(u8 col = COL_START; col <= COL_END; col++){
     132:	c0 e0       	ldi	r28, 0x00	; 0
     134:	0b c0       	rjmp	.+22     	; 0x14c <KeyPad_vInit+0x1c>
		DIO_vSetPinDir(KEYPAD_PORT, col, DIR_OUTPUT);
     136:	41 e0       	ldi	r20, 0x01	; 1
     138:	6c 2f       	mov	r22, r28
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
		DIO_vSetPinVal(KEYPAD_PORT, col, VAL_LOW); /*Initally the KEYPAD is off*/
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	6c 2f       	mov	r22, r28
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>

#define F_CPU 8000000UL
#include <avr/delay.h>

void KeyPad_vInit(){
	for(u8 col = COL_START; col <= COL_END; col++){
     14a:	cf 5f       	subi	r28, 0xFF	; 255
     14c:	c3 30       	cpi	r28, 0x03	; 3
     14e:	98 f3       	brcs	.-26     	; 0x136 <KeyPad_vInit+0x6>
     150:	c3 e0       	ldi	r28, 0x03	; 3
     152:	0b c0       	rjmp	.+22     	; 0x16a <KeyPad_vInit+0x3a>
		DIO_vSetPinDir(KEYPAD_PORT, col, DIR_OUTPUT);
		DIO_vSetPinVal(KEYPAD_PORT, col, VAL_LOW); /*Initally the KEYPAD is off*/
	}
	for(u8 row = ROW_START; row <= ROW_END; row++){
		DIO_vSetPinDir(KEYPAD_PORT, row, DIR_INPUT);
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	6c 2f       	mov	r22, r28
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
		DIO_vSetPinVal(KEYPAD_PORT, row, VAL_HIGH);/*PULL-UP*/
     15e:	41 e0       	ldi	r20, 0x01	; 1
     160:	6c 2f       	mov	r22, r28
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
void KeyPad_vInit(){
	for(u8 col = COL_START; col <= COL_END; col++){
		DIO_vSetPinDir(KEYPAD_PORT, col, DIR_OUTPUT);
		DIO_vSetPinVal(KEYPAD_PORT, col, VAL_LOW); /*Initally the KEYPAD is off*/
	}
	for(u8 row = ROW_START; row <= ROW_END; row++){
     168:	cf 5f       	subi	r28, 0xFF	; 255
     16a:	c7 30       	cpi	r28, 0x07	; 7
     16c:	98 f3       	brcs	.-26     	; 0x154 <KeyPad_vInit+0x24>
		DIO_vSetPinDir(KEYPAD_PORT, row, DIR_INPUT);
		DIO_vSetPinVal(KEYPAD_PORT, row, VAL_HIGH);/*PULL-UP*/
	}
}
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <KeyPad_u8GetPressedKey>:
u8 KeyPad_u8GetPressedKey(){
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
	u8 L_u8PressedVal = NO_PRESSED_KEY, L_u8Flag = 0;
	/*Loop on every columns*/
	for(u8 col = COL_START; col <= COL_END; col++){
     17a:	d0 e0       	ldi	r29, 0x00	; 0
		DIO_vSetPinDir(KEYPAD_PORT, row, DIR_INPUT);
		DIO_vSetPinVal(KEYPAD_PORT, row, VAL_HIGH);/*PULL-UP*/
	}
}
u8 KeyPad_u8GetPressedKey(){
	u8 L_u8PressedVal = NO_PRESSED_KEY, L_u8Flag = 0;
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	0f ef       	ldi	r16, 0xFF	; 255
	/*Loop on every columns*/
	for(u8 col = COL_START; col <= COL_END; col++){
     180:	33 c0       	rjmp	.+102    	; 0x1e8 <KeyPad_u8GetPressedKey+0x76>
		/*Set the value low (to read)*/
		DIO_vSetPinVal(KEYPAD_PORT, col , VAL_LOW);
     182:	40 e0       	ldi	r20, 0x00	; 0
     184:	6d 2f       	mov	r22, r29
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
		/*Loop on every row*/
		for(u8 row = ROW_START; row <= ROW_END; row++){
     18c:	c3 e0       	ldi	r28, 0x03	; 3
     18e:	22 c0       	rjmp	.+68     	; 0x1d4 <KeyPad_u8GetPressedKey+0x62>
			/*Check if the value is low (pressed key)*/
			if(DIO_u8GetPinVal(KEYPAD_PORT, row) == 0){
     190:	6c 2f       	mov	r22, r28
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 3c 04 	call	0x878	; 0x878 <DIO_u8GetPinVal>
     198:	81 11       	cpse	r24, r1
     19a:	1b c0       	rjmp	.+54     	; 0x1d2 <KeyPad_u8GetPressedKey+0x60>
				/*Wait till the user remove his hands*/
				while(DIO_u8GetPinVal(KEYPAD_PORT, row) == 0);
     19c:	6c 2f       	mov	r22, r28
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	0e 94 3c 04 	call	0x878	; 0x878 <DIO_u8GetPinVal>
     1a4:	88 23       	and	r24, r24
     1a6:	d1 f3       	breq	.-12     	; 0x19c <KeyPad_u8GetPressedKey+0x2a>
				/*Get the corresponding value*/
				L_u8PressedVal = L_KeyPadMatrix[row - ROW_START][col - COL_START];
     1a8:	8c 2f       	mov	r24, r28
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	03 97       	sbiw	r24, 0x03	; 3
     1ae:	fc 01       	movw	r30, r24
     1b0:	ee 0f       	add	r30, r30
     1b2:	ff 1f       	adc	r31, r31
     1b4:	e8 0f       	add	r30, r24
     1b6:	f9 1f       	adc	r31, r25
     1b8:	e0 5a       	subi	r30, 0xA0	; 160
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	ed 0f       	add	r30, r29
     1be:	f1 1d       	adc	r31, r1
     1c0:	00 81       	ld	r16, Z
     1c2:	8f e3       	ldi	r24, 0x3F	; 63
     1c4:	9c e9       	ldi	r25, 0x9C	; 156
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	f1 f7       	brne	.-4      	; 0x1c6 <KeyPad_u8GetPressedKey+0x54>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <KeyPad_u8GetPressedKey+0x5a>
     1cc:	00 00       	nop
				/*Flag is set to represent a key is pressed*/
				L_u8Flag = 1;
     1ce:	11 e0       	ldi	r17, 0x01	; 1
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <KeyPad_u8GetPressedKey+0x66>
	/*Loop on every columns*/
	for(u8 col = COL_START; col <= COL_END; col++){
		/*Set the value low (to read)*/
		DIO_vSetPinVal(KEYPAD_PORT, col , VAL_LOW);
		/*Loop on every row*/
		for(u8 row = ROW_START; row <= ROW_END; row++){
     1d2:	cf 5f       	subi	r28, 0xFF	; 255
     1d4:	c7 30       	cpi	r28, 0x07	; 7
     1d6:	e0 f2       	brcs	.-72     	; 0x190 <KeyPad_u8GetPressedKey+0x1e>
				_delay_ms(20);
				break;
			}
		}
		/*set the value high again (to prevent unwanting)*/
		DIO_vSetPinVal(KEYPAD_PORT, col, VAL_HIGH);
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	6d 2f       	mov	r22, r29
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
		if(L_u8Flag == 1) break;
     1e2:	11 30       	cpi	r17, 0x01	; 1
     1e4:	19 f0       	breq	.+6      	; 0x1ec <KeyPad_u8GetPressedKey+0x7a>
	}
}
u8 KeyPad_u8GetPressedKey(){
	u8 L_u8PressedVal = NO_PRESSED_KEY, L_u8Flag = 0;
	/*Loop on every columns*/
	for(u8 col = COL_START; col <= COL_END; col++){
     1e6:	df 5f       	subi	r29, 0xFF	; 255
     1e8:	d3 30       	cpi	r29, 0x03	; 3
     1ea:	58 f2       	brcs	.-106    	; 0x182 <KeyPad_u8GetPressedKey+0x10>
		DIO_vSetPinVal(KEYPAD_PORT, col, VAL_HIGH);
		if(L_u8Flag == 1) break;
	}

	return L_u8PressedVal;
}
     1ec:	80 2f       	mov	r24, r16
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	08 95       	ret

000001f8 <u8IntToString>:
     1f8:	2f 92       	push	r2
     1fa:	3f 92       	push	r3
     1fc:	4f 92       	push	r4
     1fe:	5f 92       	push	r5
     200:	6f 92       	push	r6
     202:	7f 92       	push	r7
     204:	8f 92       	push	r8
     206:	9f 92       	push	r9
     208:	af 92       	push	r10
     20a:	bf 92       	push	r11
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	2d 97       	sbiw	r28, 0x0d	; 13
     222:	0f b6       	in	r0, 0x3f	; 63
     224:	f8 94       	cli
     226:	de bf       	out	0x3e, r29	; 62
     228:	0f be       	out	0x3f, r0	; 63
     22a:	cd bf       	out	0x3d, r28	; 61
     22c:	2b 87       	std	Y+11, r18	; 0x0b
     22e:	83 2e       	mov	r8, r19
     230:	4c 87       	std	Y+12, r20	; 0x0c
     232:	5d 87       	std	Y+13, r21	; 0x0d
     234:	56 2e       	mov	r5, r22
     236:	47 2e       	mov	r4, r23
     238:	38 2e       	mov	r3, r24
     23a:	29 2e       	mov	r2, r25
     23c:	fe 01       	movw	r30, r28
     23e:	31 96       	adiw	r30, 0x01	; 1
     240:	8a e0       	ldi	r24, 0x0A	; 10
     242:	df 01       	movw	r26, r30
     244:	1d 92       	st	X+, r1
     246:	8a 95       	dec	r24
     248:	e9 f7       	brne	.-6      	; 0x244 <u8IntToString+0x4c>
     24a:	2b 85       	ldd	r18, Y+11	; 0x0b
     24c:	4c 85       	ldd	r20, Y+12	; 0x0c
     24e:	5d 85       	ldd	r21, Y+13	; 0x0d
     250:	83 2d       	mov	r24, r3
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	0e 94 0e 08 	call	0x101c	; 0x101c <__cmpdi2_s8>
     258:	84 f4       	brge	.+32     	; 0x27a <u8IntToString+0x82>
     25a:	8d e2       	ldi	r24, 0x2D	; 45
     25c:	89 83       	std	Y+1, r24	; 0x01
     25e:	83 2d       	mov	r24, r3
     260:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__negdi2>
     264:	2b 87       	std	Y+11, r18	; 0x0b
     266:	83 2e       	mov	r8, r19
     268:	4c 87       	std	Y+12, r20	; 0x0c
     26a:	5d 87       	std	Y+13, r21	; 0x0d
     26c:	56 2e       	mov	r5, r22
     26e:	47 2e       	mov	r4, r23
     270:	38 2e       	mov	r3, r24
     272:	29 2e       	mov	r2, r25
     274:	99 24       	eor	r9, r9
     276:	93 94       	inc	r9
     278:	42 c0       	rjmp	.+132    	; 0x2fe <u8IntToString+0x106>
     27a:	91 2c       	mov	r9, r1
     27c:	40 c0       	rjmp	.+128    	; 0x2fe <u8IntToString+0x106>
     27e:	69 2c       	mov	r6, r9
     280:	71 2c       	mov	r7, r1
     282:	0f 2e       	mov	r0, r31
     284:	fa e0       	ldi	r31, 0x0A	; 10
     286:	af 2e       	mov	r10, r31
     288:	f0 2d       	mov	r31, r0
     28a:	b1 2c       	mov	r11, r1
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	e1 2c       	mov	r14, r1
     292:	f1 2c       	mov	r15, r1
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	10 e0       	ldi	r17, 0x00	; 0
     298:	2b 85       	ldd	r18, Y+11	; 0x0b
     29a:	38 2d       	mov	r19, r8
     29c:	4c 85       	ldd	r20, Y+12	; 0x0c
     29e:	5d 85       	ldd	r21, Y+13	; 0x0d
     2a0:	65 2d       	mov	r22, r5
     2a2:	74 2d       	mov	r23, r4
     2a4:	83 2d       	mov	r24, r3
     2a6:	92 2d       	mov	r25, r2
     2a8:	0e 94 37 07 	call	0xe6e	; 0xe6e <__moddi3>
     2ac:	e1 e0       	ldi	r30, 0x01	; 1
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	ec 0f       	add	r30, r28
     2b2:	fd 1f       	adc	r31, r29
     2b4:	e6 0d       	add	r30, r6
     2b6:	f7 1d       	adc	r31, r7
     2b8:	20 5d       	subi	r18, 0xD0	; 208
     2ba:	20 83       	st	Z, r18
     2bc:	2b 85       	ldd	r18, Y+11	; 0x0b
     2be:	38 2d       	mov	r19, r8
     2c0:	4c 85       	ldd	r20, Y+12	; 0x0c
     2c2:	5d 85       	ldd	r21, Y+13	; 0x0d
     2c4:	65 2d       	mov	r22, r5
     2c6:	74 2d       	mov	r23, r4
     2c8:	83 2d       	mov	r24, r3
     2ca:	92 2d       	mov	r25, r2
     2cc:	0e 94 39 07 	call	0xe72	; 0xe72 <__divdi3>
     2d0:	2b 87       	std	Y+11, r18	; 0x0b
     2d2:	83 2e       	mov	r8, r19
     2d4:	4c 87       	std	Y+12, r20	; 0x0c
     2d6:	5d 87       	std	Y+13, r21	; 0x0d
     2d8:	56 2e       	mov	r5, r22
     2da:	47 2e       	mov	r4, r23
     2dc:	38 2e       	mov	r3, r24
     2de:	29 2e       	mov	r2, r25
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	0e 94 0e 08 	call	0x101c	; 0x101c <__cmpdi2_s8>
     2e6:	51 f4       	brne	.+20     	; 0x2fc <u8IntToString+0x104>
     2e8:	f3 01       	movw	r30, r6
     2ea:	31 96       	adiw	r30, 0x01	; 1
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	6c 0f       	add	r22, r28
     2f2:	7d 1f       	adc	r23, r29
     2f4:	e6 0f       	add	r30, r22
     2f6:	f7 1f       	adc	r31, r23
     2f8:	10 82       	st	Z, r1
     2fa:	05 c0       	rjmp	.+10     	; 0x306 <u8IntToString+0x10e>
     2fc:	93 94       	inc	r9
     2fe:	78 e0       	ldi	r23, 0x08	; 8
     300:	79 15       	cp	r23, r9
     302:	08 f0       	brcs	.+2      	; 0x306 <u8IntToString+0x10e>
     304:	bc cf       	rjmp	.-136    	; 0x27e <u8IntToString+0x86>
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	8d 32       	cpi	r24, 0x2D	; 45
     30a:	21 f4       	brne	.+8      	; 0x314 <u8IntToString+0x11c>
     30c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
     310:	41 e0       	ldi	r20, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <u8IntToString+0x11e>
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	17 c0       	rjmp	.+46     	; 0x348 <u8IntToString+0x150>
     31a:	f9 01       	movw	r30, r18
     31c:	e5 1b       	sub	r30, r21
     31e:	f1 09       	sbc	r31, r1
     320:	a1 e0       	ldi	r26, 0x01	; 1
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	ac 0f       	add	r26, r28
     326:	bd 1f       	adc	r27, r29
     328:	ea 0f       	add	r30, r26
     32a:	fb 1f       	adc	r31, r27
     32c:	60 81       	ld	r22, Z
     32e:	fc 01       	movw	r30, r24
     330:	e4 59       	subi	r30, 0x94	; 148
     332:	ff 4f       	sbci	r31, 0xFF	; 255
     334:	60 83       	st	Z, r22
     336:	5f 5f       	subi	r21, 0xFF	; 255
     338:	82 17       	cp	r24, r18
     33a:	93 07       	cpc	r25, r19
     33c:	21 f4       	brne	.+8      	; 0x346 <u8IntToString+0x14e>
     33e:	fc 01       	movw	r30, r24
     340:	e3 59       	subi	r30, 0x93	; 147
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	10 82       	st	Z, r1
     346:	4f 5f       	subi	r20, 0xFF	; 255
     348:	84 2f       	mov	r24, r20
     34a:	04 2e       	mov	r0, r20
     34c:	00 0c       	add	r0, r0
     34e:	99 0b       	sbc	r25, r25
     350:	29 2d       	mov	r18, r9
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	28 17       	cp	r18, r24
     356:	39 07       	cpc	r19, r25
     358:	04 f7       	brge	.-64     	; 0x31a <u8IntToString+0x122>
     35a:	8c e6       	ldi	r24, 0x6C	; 108
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	2d 96       	adiw	r28, 0x0d	; 13
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	f8 94       	cli
     364:	de bf       	out	0x3e, r29	; 62
     366:	0f be       	out	0x3f, r0	; 63
     368:	cd bf       	out	0x3d, r28	; 61
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	bf 90       	pop	r11
     37c:	af 90       	pop	r10
     37e:	9f 90       	pop	r9
     380:	8f 90       	pop	r8
     382:	7f 90       	pop	r7
     384:	6f 90       	pop	r6
     386:	5f 90       	pop	r5
     388:	4f 90       	pop	r4
     38a:	3f 90       	pop	r3
     38c:	2f 90       	pop	r2
     38e:	08 95       	ret

00000390 <LCD_vSendCmd>:
     390:	cf 93       	push	r28
     392:	c8 2f       	mov	r28, r24
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	67 e0       	ldi	r22, 0x07	; 7
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	64 e0       	ldi	r22, 0x04	; 4
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	66 e0       	ldi	r22, 0x06	; 6
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3b2:	c4 fb       	bst	r28, 4
     3b4:	44 27       	eor	r20, r20
     3b6:	40 f9       	bld	r20, 0
     3b8:	64 e0       	ldi	r22, 0x04	; 4
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3c0:	c5 fb       	bst	r28, 5
     3c2:	44 27       	eor	r20, r20
     3c4:	40 f9       	bld	r20, 0
     3c6:	65 e0       	ldi	r22, 0x05	; 5
     3c8:	82 e0       	ldi	r24, 0x02	; 2
     3ca:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3ce:	c6 fb       	bst	r28, 6
     3d0:	44 27       	eor	r20, r20
     3d2:	40 f9       	bld	r20, 0
     3d4:	66 e0       	ldi	r22, 0x06	; 6
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3dc:	4c 2f       	mov	r20, r28
     3de:	44 1f       	adc	r20, r20
     3e0:	44 27       	eor	r20, r20
     3e2:	44 1f       	adc	r20, r20
     3e4:	67 e0       	ldi	r22, 0x07	; 7
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	66 e0       	ldi	r22, 0x06	; 6
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     3f6:	41 e0       	ldi	r20, 0x01	; 1
     3f8:	66 e0       	ldi	r22, 0x06	; 6
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     400:	4c 2f       	mov	r20, r28
     402:	41 70       	andi	r20, 0x01	; 1
     404:	64 e0       	ldi	r22, 0x04	; 4
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     40c:	c1 fb       	bst	r28, 1
     40e:	44 27       	eor	r20, r20
     410:	40 f9       	bld	r20, 0
     412:	65 e0       	ldi	r22, 0x05	; 5
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     41a:	c2 fb       	bst	r28, 2
     41c:	44 27       	eor	r20, r20
     41e:	40 f9       	bld	r20, 0
     420:	66 e0       	ldi	r22, 0x06	; 6
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     428:	c3 fb       	bst	r28, 3
     42a:	44 27       	eor	r20, r20
     42c:	40 f9       	bld	r20, 0
     42e:	67 e0       	ldi	r22, 0x07	; 7
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	66 e0       	ldi	r22, 0x06	; 6
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <LCD_vSendData>:
     444:	cf 93       	push	r28
     446:	c8 2f       	mov	r28, r24
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	66 e0       	ldi	r22, 0x06	; 6
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	67 e0       	ldi	r22, 0x07	; 7
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	64 e0       	ldi	r22, 0x04	; 4
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     466:	c4 fb       	bst	r28, 4
     468:	44 27       	eor	r20, r20
     46a:	40 f9       	bld	r20, 0
     46c:	64 e0       	ldi	r22, 0x04	; 4
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     474:	c5 fb       	bst	r28, 5
     476:	44 27       	eor	r20, r20
     478:	40 f9       	bld	r20, 0
     47a:	65 e0       	ldi	r22, 0x05	; 5
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     482:	c6 fb       	bst	r28, 6
     484:	44 27       	eor	r20, r20
     486:	40 f9       	bld	r20, 0
     488:	66 e0       	ldi	r22, 0x06	; 6
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     490:	4c 2f       	mov	r20, r28
     492:	44 1f       	adc	r20, r20
     494:	44 27       	eor	r20, r20
     496:	44 1f       	adc	r20, r20
     498:	67 e0       	ldi	r22, 0x07	; 7
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	66 e0       	ldi	r22, 0x06	; 6
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4aa:	41 e0       	ldi	r20, 0x01	; 1
     4ac:	66 e0       	ldi	r22, 0x06	; 6
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4b4:	4c 2f       	mov	r20, r28
     4b6:	41 70       	andi	r20, 0x01	; 1
     4b8:	64 e0       	ldi	r22, 0x04	; 4
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4c0:	c1 fb       	bst	r28, 1
     4c2:	44 27       	eor	r20, r20
     4c4:	40 f9       	bld	r20, 0
     4c6:	65 e0       	ldi	r22, 0x05	; 5
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4ce:	c2 fb       	bst	r28, 2
     4d0:	44 27       	eor	r20, r20
     4d2:	40 f9       	bld	r20, 0
     4d4:	66 e0       	ldi	r22, 0x06	; 6
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4dc:	c3 fb       	bst	r28, 3
     4de:	44 27       	eor	r20, r20
     4e0:	40 f9       	bld	r20, 0
     4e2:	67 e0       	ldi	r22, 0x07	; 7
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	66 e0       	ldi	r22, 0x06	; 6
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	8a 95       	dec	r24
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCD_vSendData+0xb2>
     4fa:	00 00       	nop
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <LCD_vInit>:
     500:	8b e4       	ldi	r24, 0x4B	; 75
     502:	9d e1       	ldi	r25, 0x1D	; 29
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <LCD_vInit+0x4>
     508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_vInit+0xa>
     50a:	00 00       	nop
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	66 e0       	ldi	r22, 0x06	; 6
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	64 e0       	ldi	r22, 0x04	; 4
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	67 e0       	ldi	r22, 0x07	; 7
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	64 e0       	ldi	r22, 0x04	; 4
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     534:	41 e0       	ldi	r20, 0x01	; 1
     536:	65 e0       	ldi	r22, 0x05	; 5
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	66 e0       	ldi	r22, 0x06	; 6
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	67 e0       	ldi	r22, 0x07	; 7
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	67 e0       	ldi	r22, 0x07	; 7
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	64 e0       	ldi	r22, 0x04	; 4
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     566:	41 e0       	ldi	r20, 0x01	; 1
     568:	66 e0       	ldi	r22, 0x06	; 6
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	64 e0       	ldi	r22, 0x04	; 4
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     57a:	41 e0       	ldi	r20, 0x01	; 1
     57c:	65 e0       	ldi	r22, 0x05	; 5
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	66 e0       	ldi	r22, 0x06	; 6
     588:	82 e0       	ldi	r24, 0x02	; 2
     58a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	67 e0       	ldi	r22, 0x07	; 7
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	66 e0       	ldi	r22, 0x06	; 6
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     5a2:	88 e2       	ldi	r24, 0x28	; 40
     5a4:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCmd>
     5a8:	9d e0       	ldi	r25, 0x0D	; 13
     5aa:	9a 95       	dec	r25
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_vInit+0xaa>
     5ae:	8c e0       	ldi	r24, 0x0C	; 12
     5b0:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCmd>
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	8a 95       	dec	r24
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_vInit+0xb6>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCmd>
     5c0:	8e e7       	ldi	r24, 0x7E	; 126
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_vInit+0xc4>
     5c8:	00 00       	nop
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCmd>
     5d0:	08 95       	ret

000005d2 <LCD_vDispChar>:
     5d2:	0e 94 22 02 	call	0x444	; 0x444 <LCD_vSendData>
     5d6:	08 95       	ret

000005d8 <LCD_vSetPosition>:
	_delay_ms(1.53);
}

void LCD_vSetPosition (u8 A_u8Row, u8 A_u8Col){
	u8 L_u8FirstRow = 0x00, L_u8SecondRow = 0x40;
	switch(A_u8Row){
     5d8:	88 23       	and	r24, r24
     5da:	19 f0       	breq	.+6      	; 0x5e2 <LCD_vSetPosition+0xa>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	31 f0       	breq	.+12     	; 0x5ec <LCD_vSetPosition+0x14>
     5e0:	08 95       	ret
		case ROW0_ID: LCD_vSendCmd(CMD_SET_CURSOR_POSITION + L_u8FirstRow + A_u8Col); break;
     5e2:	80 e8       	ldi	r24, 0x80	; 128
     5e4:	86 0f       	add	r24, r22
     5e6:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCmd>
     5ea:	08 95       	ret
		case ROW1_ID: LCD_vSendCmd(CMD_SET_CURSOR_POSITION + L_u8SecondRow + A_u8Col); break;
     5ec:	80 ec       	ldi	r24, 0xC0	; 192
     5ee:	86 0f       	add	r24, r22
     5f0:	0e 94 c8 01 	call	0x390	; 0x390 <LCD_vSendCmd>
     5f4:	08 95       	ret

000005f6 <LCD_vDispNum>:
	return L_u8Chars;
}


/*You can use itoa/ltoa*/
void LCD_vDispNum(s64 A_s64Num){
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
	u8 *L_u8Str = u8IntToString(A_s64Num);
     5fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <u8IntToString>
     600:	8c 01       	movw	r16, r24

	for(u8 i=0; L_u8Str[i] != '\0'; i++){
     602:	c0 e0       	ldi	r28, 0x00	; 0
     604:	03 c0       	rjmp	.+6      	; 0x60c <LCD_vDispNum+0x16>
		LCD_vDispChar(L_u8Str[i]);
     606:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <LCD_vDispChar>

/*You can use itoa/ltoa*/
void LCD_vDispNum(s64 A_s64Num){
	u8 *L_u8Str = u8IntToString(A_s64Num);

	for(u8 i=0; L_u8Str[i] != '\0'; i++){
     60a:	cf 5f       	subi	r28, 0xFF	; 255
     60c:	f8 01       	movw	r30, r16
     60e:	ec 0f       	add	r30, r28
     610:	f1 1d       	adc	r31, r1
     612:	80 81       	ld	r24, Z
     614:	81 11       	cpse	r24, r1
     616:	f7 cf       	rjmp	.-18     	; 0x606 <LCD_vDispNum+0x10>
		LCD_vDispChar(L_u8Str[i]);
	}

}
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	08 95       	ret

00000620 <LDR_u16GetValue>:
	ADC_vInit();
}

/*LDR resistance decreases by increasing the light intensity*/
u16 LDR_u16GetValue(){
	u16 L_u8DigitalVal = ADC_u16ReadDigitalSync(LDR_CHANNEL);
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_u16ReadDigitalSync>

	u32 L_u8AnalogVal = ( (L_u8DigitalVal * 5000UL) / 1023 ); /*in mV*/
     626:	9c 01       	movw	r18, r24
     628:	a8 e8       	ldi	r26, 0x88	; 136
     62a:	b3 e1       	ldi	r27, 0x13	; 19
     62c:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
     630:	2f ef       	ldi	r18, 0xFF	; 255
     632:	33 e0       	ldi	r19, 0x03	; 3
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
	/* EQN: LDR = R * (VCC/AnalogVal - 1). R is connected to 5K*/
	return (5 * ((5000UL/L_u8AnalogVal) - 1)) ;
     63c:	68 e8       	ldi	r22, 0x88	; 136
     63e:	73 e1       	ldi	r23, 0x13	; 19
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
     648:	c9 01       	movw	r24, r18
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
}
     656:	05 97       	sbiw	r24, 0x05	; 5
     658:	08 95       	ret

0000065a <TEMPS_vInit>:
#include "TEMPS_int.h"



void TEMPS_vInit(){
	ADC_vInit();
     65a:	0e 94 40 03 	call	0x680	; 0x680 <ADC_vInit>
     65e:	08 95       	ret

00000660 <TEMPS_u8GetTemp>:
}

u8 TEMPS_u8GetTemp(){
	u16 L_u16DigitalVal = ADC_u16ReadDigitalSync(TEMPS_PIN);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 52 03 	call	0x6a4	; 0x6a4 <ADC_u16ReadDigitalSync>
	return (L_u16DigitalVal * 500UL)/1023 ;
     666:	9c 01       	movw	r18, r24
     668:	a4 ef       	ldi	r26, 0xF4	; 244
     66a:	b1 e0       	ldi	r27, 0x01	; 1
     66c:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
     670:	2f ef       	ldi	r18, 0xFF	; 255
     672:	33 e0       	ldi	r19, 0x03	; 3
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	0e 94 06 07 	call	0xe0c	; 0xe0c <__udivmodsi4>
     67c:	82 2f       	mov	r24, r18
}
     67e:	08 95       	ret

00000680 <ADC_vInit>:

	return ADCW; /*get the resulted digital value*/
}

void ADC_vTurnOff(){
	CLR_BIT(ADCSRA, ADEN); /*turn off the ADC*/
     680:	86 b1       	in	r24, 0x06	; 6
     682:	88 7f       	andi	r24, 0xF8	; 248
     684:	86 b9       	out	0x06, r24	; 6
     686:	86 b1       	in	r24, 0x06	; 6
     688:	87 60       	ori	r24, 0x07	; 7
     68a:	86 b9       	out	0x06, r24	; 6
     68c:	86 b1       	in	r24, 0x06	; 6
     68e:	8f 7d       	andi	r24, 0xDF	; 223
     690:	86 b9       	out	0x06, r24	; 6
     692:	87 b1       	in	r24, 0x07	; 7
     694:	8f 73       	andi	r24, 0x3F	; 63
     696:	80 64       	ori	r24, 0x40	; 64
     698:	8f 7d       	andi	r24, 0xDF	; 223
     69a:	87 b9       	out	0x07, r24	; 7
     69c:	86 b1       	in	r24, 0x06	; 6
     69e:	80 68       	ori	r24, 0x80	; 128
     6a0:	86 b9       	out	0x06, r24	; 6
     6a2:	08 95       	ret

000006a4 <ADC_u16ReadDigitalSync>:
     6a4:	97 b1       	in	r25, 0x07	; 7
     6a6:	90 7e       	andi	r25, 0xE0	; 224
     6a8:	89 2b       	or	r24, r25
     6aa:	87 b9       	out	0x07, r24	; 7
     6ac:	86 b1       	in	r24, 0x06	; 6
     6ae:	80 64       	ori	r24, 0x40	; 64
     6b0:	86 b9       	out	0x06, r24	; 6
     6b2:	36 99       	sbic	0x06, 6	; 6
     6b4:	fe cf       	rjmp	.-4      	; 0x6b2 <ADC_u16ReadDigitalSync+0xe>
     6b6:	84 b1       	in	r24, 0x04	; 4
     6b8:	95 b1       	in	r25, 0x05	; 5
     6ba:	08 95       	ret

000006bc <__vector_16>:
}

/*ISR for the ADC*/
void __vector_16 (void){
     6bc:	1f 92       	push	r1
     6be:	0f 92       	push	r0
     6c0:	0f b6       	in	r0, 0x3f	; 63
     6c2:	0f 92       	push	r0
     6c4:	11 24       	eor	r1, r1
     6c6:	2f 93       	push	r18
     6c8:	3f 93       	push	r19
     6ca:	4f 93       	push	r20
     6cc:	5f 93       	push	r21
     6ce:	6f 93       	push	r22
     6d0:	7f 93       	push	r23
     6d2:	8f 93       	push	r24
     6d4:	9f 93       	push	r25
     6d6:	af 93       	push	r26
     6d8:	bf 93       	push	r27
     6da:	ef 93       	push	r30
     6dc:	ff 93       	push	r31
	if(G_ISR_ADC != ADDRESS_NULL) {
     6de:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <G_ISR_ADC>
     6e2:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <G_ISR_ADC+0x1>
     6e6:	30 97       	sbiw	r30, 0x00	; 0
     6e8:	31 f0       	breq	.+12     	; 0x6f6 <__vector_16+0x3a>
		G_ISR_ADC(ADCW);/*Call back functions*/
     6ea:	84 b1       	in	r24, 0x04	; 4
     6ec:	95 b1       	in	r25, 0x05	; 5
     6ee:	09 95       	icall
		CLR_BIT(ADCSRA, ADIE); /*Turn off interrupt*/
     6f0:	86 b1       	in	r24, 0x06	; 6
     6f2:	87 7f       	andi	r24, 0xF7	; 247
     6f4:	86 b9       	out	0x06, r24	; 6
	}
}
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	bf 91       	pop	r27
     6fc:	af 91       	pop	r26
     6fe:	9f 91       	pop	r25
     700:	8f 91       	pop	r24
     702:	7f 91       	pop	r23
     704:	6f 91       	pop	r22
     706:	5f 91       	pop	r21
     708:	4f 91       	pop	r20
     70a:	3f 91       	pop	r19
     70c:	2f 91       	pop	r18
     70e:	0f 90       	pop	r0
     710:	0f be       	out	0x3f, r0	; 63
     712:	0f 90       	pop	r0
     714:	1f 90       	pop	r1
     716:	18 95       	reti

00000718 <DIO_vSetPinDir>:
		case PORTB_ID: L_u8PortVal = PINB; break;
		case PORTC_ID: L_u8PortVal = PINC; break;
		case PORTD_ID: L_u8PortVal = PIND; break;
	}
	return L_u8PortVal;
}
     718:	81 30       	cpi	r24, 0x01	; 1
     71a:	d1 f0       	breq	.+52     	; 0x750 <DIO_vSetPinDir+0x38>
     71c:	28 f0       	brcs	.+10     	; 0x728 <DIO_vSetPinDir+0x10>
     71e:	82 30       	cpi	r24, 0x02	; 2
     720:	59 f1       	breq	.+86     	; 0x778 <DIO_vSetPinDir+0x60>
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	e9 f1       	breq	.+122    	; 0x7a0 <DIO_vSetPinDir+0x88>
     726:	08 95       	ret
     728:	2a b3       	in	r18, 0x1a	; 26
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	06 2e       	mov	r0, r22
     730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_vSetPinDir+0x1e>
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	0a 94       	dec	r0
     738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_vSetPinDir+0x1a>
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_vSetPinDir+0x2a>
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	6a 95       	dec	r22
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_vSetPinDir+0x26>
     746:	80 95       	com	r24
     748:	82 23       	and	r24, r18
     74a:	48 2b       	or	r20, r24
     74c:	4a bb       	out	0x1a, r20	; 26
     74e:	08 95       	ret
     750:	27 b3       	in	r18, 0x17	; 23
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	06 2e       	mov	r0, r22
     758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_vSetPinDir+0x46>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0a 94       	dec	r0
     760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_vSetPinDir+0x42>
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	02 c0       	rjmp	.+4      	; 0x76a <DIO_vSetPinDir+0x52>
     766:	44 0f       	add	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	6a 95       	dec	r22
     76c:	e2 f7       	brpl	.-8      	; 0x766 <DIO_vSetPinDir+0x4e>
     76e:	80 95       	com	r24
     770:	82 23       	and	r24, r18
     772:	48 2b       	or	r20, r24
     774:	47 bb       	out	0x17, r20	; 23
     776:	08 95       	ret
     778:	24 b3       	in	r18, 0x14	; 20
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	06 2e       	mov	r0, r22
     780:	02 c0       	rjmp	.+4      	; 0x786 <DIO_vSetPinDir+0x6e>
     782:	88 0f       	add	r24, r24
     784:	99 1f       	adc	r25, r25
     786:	0a 94       	dec	r0
     788:	e2 f7       	brpl	.-8      	; 0x782 <DIO_vSetPinDir+0x6a>
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_vSetPinDir+0x7a>
     78e:	44 0f       	add	r20, r20
     790:	55 1f       	adc	r21, r21
     792:	6a 95       	dec	r22
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_vSetPinDir+0x76>
     796:	80 95       	com	r24
     798:	82 23       	and	r24, r18
     79a:	48 2b       	or	r20, r24
     79c:	44 bb       	out	0x14, r20	; 20
     79e:	08 95       	ret
     7a0:	21 b3       	in	r18, 0x11	; 17
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	06 2e       	mov	r0, r22
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_vSetPinDir+0x96>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	0a 94       	dec	r0
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_vSetPinDir+0x92>
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_vSetPinDir+0xa2>
     7b6:	44 0f       	add	r20, r20
     7b8:	55 1f       	adc	r21, r21
     7ba:	6a 95       	dec	r22
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_vSetPinDir+0x9e>
     7be:	80 95       	com	r24
     7c0:	82 23       	and	r24, r18
     7c2:	48 2b       	or	r20, r24
     7c4:	41 bb       	out	0x11, r20	; 17
     7c6:	08 95       	ret

000007c8 <DIO_vSetPinVal>:
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	d1 f0       	breq	.+52     	; 0x800 <__DATA_REGION_LENGTH__>
     7cc:	28 f0       	brcs	.+10     	; 0x7d8 <DIO_vSetPinVal+0x10>
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	59 f1       	breq	.+86     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	e9 f1       	breq	.+122    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     7d6:	08 95       	ret
     7d8:	2b b3       	in	r18, 0x1b	; 27
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	06 2e       	mov	r0, r22
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <DIO_vSetPinVal+0x1e>
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	0a 94       	dec	r0
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <DIO_vSetPinVal+0x1a>
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_vSetPinVal+0x2a>
     7ee:	44 0f       	add	r20, r20
     7f0:	55 1f       	adc	r21, r21
     7f2:	6a 95       	dec	r22
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_vSetPinVal+0x26>
     7f6:	80 95       	com	r24
     7f8:	82 23       	and	r24, r18
     7fa:	48 2b       	or	r20, r24
     7fc:	4b bb       	out	0x1b, r20	; 27
     7fe:	08 95       	ret
     800:	28 b3       	in	r18, 0x18	; 24
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	06 2e       	mov	r0, r22
     808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80a:	88 0f       	add	r24, r24
     80c:	99 1f       	adc	r25, r25
     80e:	0a 94       	dec	r0
     810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     816:	44 0f       	add	r20, r20
     818:	55 1f       	adc	r21, r21
     81a:	6a 95       	dec	r22
     81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81e:	80 95       	com	r24
     820:	82 23       	and	r24, r18
     822:	48 2b       	or	r20, r24
     824:	48 bb       	out	0x18, r20	; 24
     826:	08 95       	ret
     828:	25 b3       	in	r18, 0x15	; 21
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	06 2e       	mov	r0, r22
     830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	0a 94       	dec	r0
     838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     83a:	50 e0       	ldi	r21, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83e:	44 0f       	add	r20, r20
     840:	55 1f       	adc	r21, r21
     842:	6a 95       	dec	r22
     844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     846:	80 95       	com	r24
     848:	82 23       	and	r24, r18
     84a:	48 2b       	or	r20, r24
     84c:	45 bb       	out	0x15, r20	; 21
     84e:	08 95       	ret
     850:	22 b3       	in	r18, 0x12	; 18
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	06 2e       	mov	r0, r22
     858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	0a 94       	dec	r0
     860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	44 0f       	add	r20, r20
     868:	55 1f       	adc	r21, r21
     86a:	6a 95       	dec	r22
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	80 95       	com	r24
     870:	82 23       	and	r24, r18
     872:	48 2b       	or	r20, r24
     874:	42 bb       	out	0x12, r20	; 18
     876:	08 95       	ret

00000878 <DIO_u8GetPinVal>:
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	81 f0       	breq	.+32     	; 0x89c <DIO_u8GetPinVal+0x24>
     87c:	28 f0       	brcs	.+10     	; 0x888 <DIO_u8GetPinVal+0x10>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	b9 f0       	breq	.+46     	; 0x8b0 <DIO_u8GetPinVal+0x38>
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	f9 f0       	breq	.+62     	; 0x8c4 <DIO_u8GetPinVal+0x4c>
     886:	27 c0       	rjmp	.+78     	; 0x8d6 <DIO_u8GetPinVal+0x5e>
     888:	89 b3       	in	r24, 0x19	; 25
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	02 c0       	rjmp	.+4      	; 0x892 <DIO_u8GetPinVal+0x1a>
     88e:	95 95       	asr	r25
     890:	87 95       	ror	r24
     892:	6a 95       	dec	r22
     894:	e2 f7       	brpl	.-8      	; 0x88e <DIO_u8GetPinVal+0x16>
     896:	98 2f       	mov	r25, r24
     898:	91 70       	andi	r25, 0x01	; 1
     89a:	1d c0       	rjmp	.+58     	; 0x8d6 <DIO_u8GetPinVal+0x5e>
     89c:	86 b3       	in	r24, 0x16	; 22
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <DIO_u8GetPinVal+0x2e>
     8a2:	95 95       	asr	r25
     8a4:	87 95       	ror	r24
     8a6:	6a 95       	dec	r22
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <DIO_u8GetPinVal+0x2a>
     8aa:	98 2f       	mov	r25, r24
     8ac:	91 70       	andi	r25, 0x01	; 1
     8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <DIO_u8GetPinVal+0x5e>
     8b0:	83 b3       	in	r24, 0x13	; 19
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <DIO_u8GetPinVal+0x42>
     8b6:	95 95       	asr	r25
     8b8:	87 95       	ror	r24
     8ba:	6a 95       	dec	r22
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <DIO_u8GetPinVal+0x3e>
     8be:	98 2f       	mov	r25, r24
     8c0:	91 70       	andi	r25, 0x01	; 1
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <DIO_u8GetPinVal+0x5e>
     8c4:	80 b3       	in	r24, 0x10	; 16
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <DIO_u8GetPinVal+0x56>
     8ca:	95 95       	asr	r25
     8cc:	87 95       	ror	r24
     8ce:	6a 95       	dec	r22
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <DIO_u8GetPinVal+0x52>
     8d2:	98 2f       	mov	r25, r24
     8d4:	91 70       	andi	r25, 0x01	; 1
     8d6:	89 2f       	mov	r24, r25
     8d8:	08 95       	ret

000008da <DIO_vTogPin>:

void DIO_vTogPin (u8 A_u8PortId, u8 A_u8PinId){
	switch(A_u8PortId){
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	89 f0       	breq	.+34     	; 0x900 <DIO_vTogPin+0x26>
     8de:	28 f0       	brcs	.+10     	; 0x8ea <DIO_vTogPin+0x10>
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	c9 f0       	breq	.+50     	; 0x916 <DIO_vTogPin+0x3c>
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	11 f1       	breq	.+68     	; 0x92c <DIO_vTogPin+0x52>
     8e8:	08 95       	ret
		case PORTA_ID: TOG_BIT(PORTA, A_u8PinId); break;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <DIO_vTogPin+0x1a>
     8f0:	88 0f       	add	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	6a 95       	dec	r22
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <DIO_vTogPin+0x16>
     8f8:	9b b3       	in	r25, 0x1b	; 27
     8fa:	89 27       	eor	r24, r25
     8fc:	8b bb       	out	0x1b, r24	; 27
     8fe:	08 95       	ret
		case PORTB_ID: TOG_BIT(PORTB, A_u8PinId); break;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	02 c0       	rjmp	.+4      	; 0x90a <DIO_vTogPin+0x30>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	6a 95       	dec	r22
     90c:	e2 f7       	brpl	.-8      	; 0x906 <DIO_vTogPin+0x2c>
     90e:	98 b3       	in	r25, 0x18	; 24
     910:	89 27       	eor	r24, r25
     912:	88 bb       	out	0x18, r24	; 24
     914:	08 95       	ret
		case PORTC_ID: TOG_BIT(PORTC, A_u8PinId); break;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <DIO_vTogPin+0x46>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	6a 95       	dec	r22
     922:	e2 f7       	brpl	.-8      	; 0x91c <DIO_vTogPin+0x42>
     924:	95 b3       	in	r25, 0x15	; 21
     926:	89 27       	eor	r24, r25
     928:	85 bb       	out	0x15, r24	; 21
     92a:	08 95       	ret
		case PORTD_ID: TOG_BIT(PORTD, A_u8PinId); break;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_vTogPin+0x5c>
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	6a 95       	dec	r22
     938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_vTogPin+0x58>
     93a:	92 b3       	in	r25, 0x12	; 18
     93c:	89 27       	eor	r24, r25
     93e:	82 bb       	out	0x12, r24	; 18
     940:	08 95       	ret

00000942 <EXTI_vInitINT0>:
	DIO_vSetPinDir(INT2_PORT, INT2_PIN, DIR_INPUT);/*enable input*/
	DIO_vSetPinVal(INT2_PORT, INT2_PIN, VAL_HIGH);/*enable pull-up*/
	SET_BIT(GICR,INT2);

	/*Bit masking for the mode*/
	MCUCSR = ( MCUCSR&(0xBF) ) | (INT2_SENSE_CONTROL << ISC2);
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	62 e0       	ldi	r22, 0x02	; 2
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	0e 94 8c 03 	call	0x718	; 0x718 <DIO_vSetPinDir>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <DIO_vSetPinVal>
     956:	8b b7       	in	r24, 0x3b	; 59
     958:	80 64       	ori	r24, 0x40	; 64
     95a:	8b bf       	out	0x3b, r24	; 59
     95c:	85 b7       	in	r24, 0x35	; 53
     95e:	8c 7f       	andi	r24, 0xFC	; 252
     960:	82 60       	ori	r24, 0x02	; 2
     962:	85 bf       	out	0x35, r24	; 53
     964:	08 95       	ret

00000966 <EXTI_vReg_Func>:
}

void EXTI_vReg_Func( ptr_func_t ptr, u8 A_u8IntId){
	switch(A_u8IntId){
     966:	61 30       	cpi	r22, 0x01	; 1
     968:	49 f0       	breq	.+18     	; 0x97c <EXTI_vReg_Func+0x16>
     96a:	18 f0       	brcs	.+6      	; 0x972 <EXTI_vReg_Func+0xc>
     96c:	62 30       	cpi	r22, 0x02	; 2
     96e:	59 f0       	breq	.+22     	; 0x986 <EXTI_vReg_Func+0x20>
     970:	08 95       	ret
		case INT0_ID: G_ISR_INT0_ptr = ptr; break;
     972:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <G_ISR_INT0_ptr+0x1>
     976:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <G_ISR_INT0_ptr>
     97a:	08 95       	ret
		case INT1_ID: G_ISR_INT1_ptr = ptr; break;
     97c:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <G_ISR_INT1_ptr+0x1>
     980:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <G_ISR_INT1_ptr>
     984:	08 95       	ret
		case INT2_ID: G_ISR_INT2_ptr = ptr; break;
     986:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <G_ISR_INT2_ptr+0x1>
     98a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <G_ISR_INT2_ptr>
     98e:	08 95       	ret

00000990 <__vector_1>:
	}
}

void __vector_1(void){
     990:	1f 92       	push	r1
     992:	0f 92       	push	r0
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	0f 92       	push	r0
     998:	11 24       	eor	r1, r1
     99a:	2f 93       	push	r18
     99c:	3f 93       	push	r19
     99e:	4f 93       	push	r20
     9a0:	5f 93       	push	r21
     9a2:	6f 93       	push	r22
     9a4:	7f 93       	push	r23
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	af 93       	push	r26
     9ac:	bf 93       	push	r27
     9ae:	ef 93       	push	r30
     9b0:	ff 93       	push	r31
	G_ISR_INT0_ptr();
     9b2:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <G_ISR_INT0_ptr>
     9b6:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <G_ISR_INT0_ptr+0x1>
     9ba:	09 95       	icall
}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	0f 90       	pop	r0
     9da:	1f 90       	pop	r1
     9dc:	18 95       	reti

000009de <__vector_2>:

void __vector_2(void){
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 93       	push	r18
     9ea:	3f 93       	push	r19
     9ec:	4f 93       	push	r20
     9ee:	5f 93       	push	r21
     9f0:	6f 93       	push	r22
     9f2:	7f 93       	push	r23
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	G_ISR_INT1_ptr();
     a00:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <G_ISR_INT1_ptr>
     a04:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <G_ISR_INT1_ptr+0x1>
     a08:	09 95       	icall
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_3>:

void __vector_3(void){
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
	G_ISR_INT2_ptr();
     a4e:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <G_ISR_INT2_ptr>
     a52:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <G_ISR_INT2_ptr+0x1>
     a56:	09 95       	icall
}
     a58:	ff 91       	pop	r31
     a5a:	ef 91       	pop	r30
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	1f 90       	pop	r1
     a78:	18 95       	reti

00000a7a <GIE_vEnableGlobaLInt>:
#include "GIE_reg.h"
#include "GIE_int.h"

/*Enable global interrupt*/
void GIE_vEnableGlobaLInt(){
	SET_BIT(SREG, I);
     a7a:	8f b7       	in	r24, 0x3f	; 63
     a7c:	80 68       	ori	r24, 0x80	; 128
     a7e:	8f bf       	out	0x3f, r24	; 63
     a80:	08 95       	ret

00000a82 <__vector_10>:
	return;
}


/*TIMER0 COMP*/
void __vector_10(void){
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	4f 93       	push	r20
     a92:	5f 93       	push	r21
     a94:	6f 93       	push	r22
     a96:	7f 93       	push	r23
     a98:	8f 93       	push	r24
     a9a:	9f 93       	push	r25
     a9c:	af 93       	push	r26
     a9e:	bf 93       	push	r27
     aa0:	ef 93       	push	r30
     aa2:	ff 93       	push	r31
	if(G_PTRF_TIM0_CTC != ADDRESS_NULL){
     aa4:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <G_PTRF_TIM0_CTC>
     aa8:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <G_PTRF_TIM0_CTC+0x1>
     aac:	30 97       	sbiw	r30, 0x00	; 0
     aae:	09 f0       	breq	.+2      	; 0xab2 <__vector_10+0x30>
		G_PTRF_TIM0_CTC();
     ab0:	09 95       	icall
	} else {
		/*Handle callback error*/
	}
}
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_11>:

/*TIMER0 OVF*/
void __vector_11(void){
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	4f 93       	push	r20
     ae4:	5f 93       	push	r21
     ae6:	6f 93       	push	r22
     ae8:	7f 93       	push	r23
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
	if(G_PTRF_TIM0_OVF != ADDRESS_NULL){
     af6:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <G_PTRF_TIM0_OVF>
     afa:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <G_PTRF_TIM0_OVF+0x1>
     afe:	30 97       	sbiw	r30, 0x00	; 0
     b00:	09 f0       	breq	.+2      	; 0xb04 <__vector_11+0x30>
			G_PTRF_TIM0_OVF();
     b02:	09 95       	icall
	} else {
		/*Handle callback error*/
	}
}
     b04:	ff 91       	pop	r31
     b06:	ef 91       	pop	r30
     b08:	bf 91       	pop	r27
     b0a:	af 91       	pop	r26
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	7f 91       	pop	r23
     b12:	6f 91       	pop	r22
     b14:	5f 91       	pop	r21
     b16:	4f 91       	pop	r20
     b18:	3f 91       	pop	r19
     b1a:	2f 91       	pop	r18
     b1c:	0f 90       	pop	r0
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	0f 90       	pop	r0
     b22:	1f 90       	pop	r1
     b24:	18 95       	reti

00000b26 <__vector_6>:


/**************   TIMER1 ISR   **************/

/*TIMER1 CAPT*/
void __vector_6(void)  {
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	2f 93       	push	r18
     b32:	3f 93       	push	r19
     b34:	4f 93       	push	r20
     b36:	5f 93       	push	r21
     b38:	6f 93       	push	r22
     b3a:	7f 93       	push	r23
     b3c:	8f 93       	push	r24
     b3e:	9f 93       	push	r25
     b40:	af 93       	push	r26
     b42:	bf 93       	push	r27
     b44:	ef 93       	push	r30
     b46:	ff 93       	push	r31
	if(G_PTRF_TIM1_ICF1 != ADDRESS_NULL) {
     b48:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <G_PTRF_TIM1_ICF1>
     b4c:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <G_PTRF_TIM1_ICF1+0x1>
     b50:	30 97       	sbiw	r30, 0x00	; 0
     b52:	09 f0       	breq	.+2      	; 0xb56 <__vector_6+0x30>
		G_PTRF_TIM1_ICF1();
     b54:	09 95       	icall
	} else {

	}
}
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <__vector_7>:

/*TIMER1 COMPA*/
void __vector_7(void){
     b78:	1f 92       	push	r1
     b7a:	0f 92       	push	r0
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
	if(G_PTRF_TIM1_OC1AF != ADDRESS_NULL) {
     b9a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <G_PTRF_TIM1_OC1AF>
     b9e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <G_PTRF_TIM1_OC1AF+0x1>
     ba2:	30 97       	sbiw	r30, 0x00	; 0
     ba4:	09 f0       	breq	.+2      	; 0xba8 <__vector_7+0x30>
		G_PTRF_TIM1_OC1AF();
     ba6:	09 95       	icall
	} else {

	}
}
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <__vector_8>:

/*TIMER1 COMPB*/
void __vector_8(void){
     bca:	1f 92       	push	r1
     bcc:	0f 92       	push	r0
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	0f 92       	push	r0
     bd2:	11 24       	eor	r1, r1
     bd4:	2f 93       	push	r18
     bd6:	3f 93       	push	r19
     bd8:	4f 93       	push	r20
     bda:	5f 93       	push	r21
     bdc:	6f 93       	push	r22
     bde:	7f 93       	push	r23
     be0:	8f 93       	push	r24
     be2:	9f 93       	push	r25
     be4:	af 93       	push	r26
     be6:	bf 93       	push	r27
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31
	if(G_PTRF_TIM1_OC1BF != ADDRESS_NULL) {
     bec:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <G_PTRF_TIM1_OC1BF>
     bf0:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <G_PTRF_TIM1_OC1BF+0x1>
     bf4:	30 97       	sbiw	r30, 0x00	; 0
     bf6:	09 f0       	breq	.+2      	; 0xbfa <__vector_8+0x30>
		G_PTRF_TIM1_OC1BF();
     bf8:	09 95       	icall
	} else {

	}
}
     bfa:	ff 91       	pop	r31
     bfc:	ef 91       	pop	r30
     bfe:	bf 91       	pop	r27
     c00:	af 91       	pop	r26
     c02:	9f 91       	pop	r25
     c04:	8f 91       	pop	r24
     c06:	7f 91       	pop	r23
     c08:	6f 91       	pop	r22
     c0a:	5f 91       	pop	r21
     c0c:	4f 91       	pop	r20
     c0e:	3f 91       	pop	r19
     c10:	2f 91       	pop	r18
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti

00000c1c <__vector_9>:

/*TIMER1 OVF*/
void __vector_9(void){
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	2f 93       	push	r18
     c28:	3f 93       	push	r19
     c2a:	4f 93       	push	r20
     c2c:	5f 93       	push	r21
     c2e:	6f 93       	push	r22
     c30:	7f 93       	push	r23
     c32:	8f 93       	push	r24
     c34:	9f 93       	push	r25
     c36:	af 93       	push	r26
     c38:	bf 93       	push	r27
     c3a:	ef 93       	push	r30
     c3c:	ff 93       	push	r31
	if(G_PTRF_TIM1_OVF != ADDRESS_NULL) {
     c3e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <G_PTRF_TIM1_OVF>
     c42:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <G_PTRF_TIM1_OVF+0x1>
     c46:	30 97       	sbiw	r30, 0x00	; 0
     c48:	09 f0       	breq	.+2      	; 0xc4c <__vector_9+0x30>
		G_PTRF_TIM1_OVF();
     c4a:	09 95       	icall
	} else {

	}
}
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_4>:


/**************   TIMER2 ISR   **************/

/*TIMER2 COMP*/
void __vector_4(void){
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	2f 93       	push	r18
     c7a:	3f 93       	push	r19
     c7c:	4f 93       	push	r20
     c7e:	5f 93       	push	r21
     c80:	6f 93       	push	r22
     c82:	7f 93       	push	r23
     c84:	8f 93       	push	r24
     c86:	9f 93       	push	r25
     c88:	af 93       	push	r26
     c8a:	bf 93       	push	r27
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
	if(G_PTRF_TIM2_CTC != ADDRESS_NULL){
     c90:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <G_PTRF_TIM2_CTC>
     c94:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <G_PTRF_TIM2_CTC+0x1>
     c98:	30 97       	sbiw	r30, 0x00	; 0
     c9a:	09 f0       	breq	.+2      	; 0xc9e <__vector_4+0x30>
		G_PTRF_TIM2_CTC();
     c9c:	09 95       	icall
	} else {
		/*Handle callback error*/
	}
}
     c9e:	ff 91       	pop	r31
     ca0:	ef 91       	pop	r30
     ca2:	bf 91       	pop	r27
     ca4:	af 91       	pop	r26
     ca6:	9f 91       	pop	r25
     ca8:	8f 91       	pop	r24
     caa:	7f 91       	pop	r23
     cac:	6f 91       	pop	r22
     cae:	5f 91       	pop	r21
     cb0:	4f 91       	pop	r20
     cb2:	3f 91       	pop	r19
     cb4:	2f 91       	pop	r18
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_5>:

/*TIMER2 OVF*/
void __vector_5(void){
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
	if(G_PTRF_TIM2_OVF != ADDRESS_NULL){
     ce2:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <G_PTRF_TIM2_OVF>
     ce6:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <G_PTRF_TIM2_OVF+0x1>
     cea:	30 97       	sbiw	r30, 0x00	; 0
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__vector_5+0x30>
		G_PTRF_TIM2_OVF();
     cee:	09 95       	icall
	} else {
		/*Handle callback error*/
	}
}
     cf0:	ff 91       	pop	r31
     cf2:	ef 91       	pop	r30
     cf4:	bf 91       	pop	r27
     cf6:	af 91       	pop	r26
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	7f 91       	pop	r23
     cfe:	6f 91       	pop	r22
     d00:	5f 91       	pop	r21
     d02:	4f 91       	pop	r20
     d04:	3f 91       	pop	r19
     d06:	2f 91       	pop	r18
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <__vector_13>:
	UDR = (u8)A_u16Data;
}


/*USART, RX Complete*/
void __vector_13(void) {
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
	if(G_RX_COMPLETE_PTR_Iu16_Ov != ADDRESS_NULL) {
     d34:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <G_RX_COMPLETE_PTR_Iu16_Ov>
     d38:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <G_RX_COMPLETE_PTR_Iu16_Ov+0x1>
     d3c:	30 97       	sbiw	r30, 0x00	; 0
     d3e:	19 f0       	breq	.+6      	; 0xd46 <__vector_13+0x34>
		G_RX_COMPLETE_PTR_Iu16_Ov(UDR);
     d40:	8c b1       	in	r24, 0x0c	; 12
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	09 95       	icall
	}
}
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_14>:

/*USART Data Register Empty*/
void __vector_14(void){
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
	if(G_UDRE_PTR_Iv_Ov != ADDRESS_NULL) {
     d8a:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <G_UDRE_PTR_Iv_Ov>
     d8e:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <G_UDRE_PTR_Iv_Ov+0x1>
     d92:	30 97       	sbiw	r30, 0x00	; 0
     d94:	09 f0       	breq	.+2      	; 0xd98 <__vector_14+0x30>
		G_UDRE_PTR_Iv_Ov();
     d96:	09 95       	icall
	}
}
     d98:	ff 91       	pop	r31
     d9a:	ef 91       	pop	r30
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	0f 90       	pop	r0
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	0f 90       	pop	r0
     db6:	1f 90       	pop	r1
     db8:	18 95       	reti

00000dba <__vector_15>:

/*USART, TX Complete*/
void __vector_15(void){
     dba:	1f 92       	push	r1
     dbc:	0f 92       	push	r0
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	0f 92       	push	r0
     dc2:	11 24       	eor	r1, r1
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
	if(G_TX_COMPLETE_PTR_Iv_Ov != ADDRESS_NULL) {
     ddc:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <G_TX_COMPLETE_PTR_Iv_Ov>
     de0:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <G_TX_COMPLETE_PTR_Iv_Ov+0x1>
     de4:	30 97       	sbiw	r30, 0x00	; 0
     de6:	09 f0       	breq	.+2      	; 0xdea <__vector_15+0x30>
		G_TX_COMPLETE_PTR_Iv_Ov();
     de8:	09 95       	icall
	}
}
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__udivmodsi4>:
     e0c:	a1 e2       	ldi	r26, 0x21	; 33
     e0e:	1a 2e       	mov	r1, r26
     e10:	aa 1b       	sub	r26, r26
     e12:	bb 1b       	sub	r27, r27
     e14:	fd 01       	movw	r30, r26
     e16:	0d c0       	rjmp	.+26     	; 0xe32 <__udivmodsi4_ep>

00000e18 <__udivmodsi4_loop>:
     e18:	aa 1f       	adc	r26, r26
     e1a:	bb 1f       	adc	r27, r27
     e1c:	ee 1f       	adc	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	a2 17       	cp	r26, r18
     e22:	b3 07       	cpc	r27, r19
     e24:	e4 07       	cpc	r30, r20
     e26:	f5 07       	cpc	r31, r21
     e28:	20 f0       	brcs	.+8      	; 0xe32 <__udivmodsi4_ep>
     e2a:	a2 1b       	sub	r26, r18
     e2c:	b3 0b       	sbc	r27, r19
     e2e:	e4 0b       	sbc	r30, r20
     e30:	f5 0b       	sbc	r31, r21

00000e32 <__udivmodsi4_ep>:
     e32:	66 1f       	adc	r22, r22
     e34:	77 1f       	adc	r23, r23
     e36:	88 1f       	adc	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	1a 94       	dec	r1
     e3c:	69 f7       	brne	.-38     	; 0xe18 <__udivmodsi4_loop>
     e3e:	60 95       	com	r22
     e40:	70 95       	com	r23
     e42:	80 95       	com	r24
     e44:	90 95       	com	r25
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	bd 01       	movw	r22, r26
     e4c:	cf 01       	movw	r24, r30
     e4e:	08 95       	ret

00000e50 <__umulhisi3>:
     e50:	a2 9f       	mul	r26, r18
     e52:	b0 01       	movw	r22, r0
     e54:	b3 9f       	mul	r27, r19
     e56:	c0 01       	movw	r24, r0
     e58:	a3 9f       	mul	r26, r19
     e5a:	70 0d       	add	r23, r0
     e5c:	81 1d       	adc	r24, r1
     e5e:	11 24       	eor	r1, r1
     e60:	91 1d       	adc	r25, r1
     e62:	b2 9f       	mul	r27, r18
     e64:	70 0d       	add	r23, r0
     e66:	81 1d       	adc	r24, r1
     e68:	11 24       	eor	r1, r1
     e6a:	91 1d       	adc	r25, r1
     e6c:	08 95       	ret

00000e6e <__moddi3>:
     e6e:	68 94       	set
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <__divdi3_moddi3>

00000e72 <__divdi3>:
     e72:	e8 94       	clt

00000e74 <__divdi3_moddi3>:
     e74:	f9 2f       	mov	r31, r25
     e76:	f1 2b       	or	r31, r17
     e78:	12 f0       	brmi	.+4      	; 0xe7e <__divdi3_moddi3+0xa>
     e7a:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__udivdi3_umoddi3>
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e5 e4       	ldi	r30, 0x45	; 69
     e84:	f7 e0       	ldi	r31, 0x07	; 7
     e86:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__prologue_saves__+0xc>
     e8a:	09 2e       	mov	r0, r25
     e8c:	05 94       	asr	r0
     e8e:	22 f4       	brpl	.+8      	; 0xe98 <__divdi3_moddi3+0x24>
     e90:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__negdi2>
     e94:	11 23       	and	r17, r17
     e96:	92 f4       	brpl	.+36     	; 0xebc <__divdi3_moddi3+0x48>
     e98:	f0 e8       	ldi	r31, 0x80	; 128
     e9a:	0f 26       	eor	r0, r31
     e9c:	ff ef       	ldi	r31, 0xFF	; 255
     e9e:	e0 94       	com	r14
     ea0:	f0 94       	com	r15
     ea2:	00 95       	com	r16
     ea4:	10 95       	com	r17
     ea6:	b0 94       	com	r11
     ea8:	c0 94       	com	r12
     eaa:	d0 94       	com	r13
     eac:	a1 94       	neg	r10
     eae:	bf 0a       	sbc	r11, r31
     eb0:	cf 0a       	sbc	r12, r31
     eb2:	df 0a       	sbc	r13, r31
     eb4:	ef 0a       	sbc	r14, r31
     eb6:	ff 0a       	sbc	r15, r31
     eb8:	0f 0b       	sbc	r16, r31
     eba:	1f 0b       	sbc	r17, r31
     ebc:	0e 94 76 07 	call	0xeec	; 0xeec <__udivmod64>
     ec0:	07 fc       	sbrc	r0, 7
     ec2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__negdi2>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	ec e0       	ldi	r30, 0x0C	; 12
     ecc:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__epilogue_restores__+0xc>

00000ed0 <__umoddi3>:
     ed0:	68 94       	set
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <__udivdi3_umoddi3>

00000ed4 <__udivdi3>:
     ed4:	e8 94       	clt

00000ed6 <__udivdi3_umoddi3>:
     ed6:	8f 92       	push	r8
     ed8:	9f 92       	push	r9
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	0e 94 76 07 	call	0xeec	; 0xeec <__udivmod64>
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	08 95       	ret

00000eec <__udivmod64>:
     eec:	88 24       	eor	r8, r8
     eee:	99 24       	eor	r9, r9
     ef0:	f4 01       	movw	r30, r8
     ef2:	e4 01       	movw	r28, r8
     ef4:	b0 e4       	ldi	r27, 0x40	; 64
     ef6:	9f 93       	push	r25
     ef8:	aa 27       	eor	r26, r26
     efa:	9a 15       	cp	r25, r10
     efc:	8b 04       	cpc	r8, r11
     efe:	9c 04       	cpc	r9, r12
     f00:	ed 05       	cpc	r30, r13
     f02:	fe 05       	cpc	r31, r14
     f04:	cf 05       	cpc	r28, r15
     f06:	d0 07       	cpc	r29, r16
     f08:	a1 07       	cpc	r26, r17
     f0a:	98 f4       	brcc	.+38     	; 0xf32 <__udivmod64+0x46>
     f0c:	ad 2f       	mov	r26, r29
     f0e:	dc 2f       	mov	r29, r28
     f10:	cf 2f       	mov	r28, r31
     f12:	fe 2f       	mov	r31, r30
     f14:	e9 2d       	mov	r30, r9
     f16:	98 2c       	mov	r9, r8
     f18:	89 2e       	mov	r8, r25
     f1a:	98 2f       	mov	r25, r24
     f1c:	87 2f       	mov	r24, r23
     f1e:	76 2f       	mov	r23, r22
     f20:	65 2f       	mov	r22, r21
     f22:	54 2f       	mov	r21, r20
     f24:	43 2f       	mov	r20, r19
     f26:	32 2f       	mov	r19, r18
     f28:	22 27       	eor	r18, r18
     f2a:	b8 50       	subi	r27, 0x08	; 8
     f2c:	31 f7       	brne	.-52     	; 0xefa <__udivmod64+0xe>
     f2e:	bf 91       	pop	r27
     f30:	27 c0       	rjmp	.+78     	; 0xf80 <__udivmod64+0x94>
     f32:	1b 2e       	mov	r1, r27
     f34:	bf 91       	pop	r27
     f36:	bb 27       	eor	r27, r27
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	44 1f       	adc	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	88 1c       	adc	r8, r8
     f4a:	99 1c       	adc	r9, r9
     f4c:	ee 1f       	adc	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	cc 1f       	adc	r28, r28
     f52:	dd 1f       	adc	r29, r29
     f54:	aa 1f       	adc	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	8a 14       	cp	r8, r10
     f5a:	9b 04       	cpc	r9, r11
     f5c:	ec 05       	cpc	r30, r12
     f5e:	fd 05       	cpc	r31, r13
     f60:	ce 05       	cpc	r28, r14
     f62:	df 05       	cpc	r29, r15
     f64:	a0 07       	cpc	r26, r16
     f66:	b1 07       	cpc	r27, r17
     f68:	48 f0       	brcs	.+18     	; 0xf7c <__udivmod64+0x90>
     f6a:	8a 18       	sub	r8, r10
     f6c:	9b 08       	sbc	r9, r11
     f6e:	ec 09       	sbc	r30, r12
     f70:	fd 09       	sbc	r31, r13
     f72:	ce 09       	sbc	r28, r14
     f74:	df 09       	sbc	r29, r15
     f76:	a0 0b       	sbc	r26, r16
     f78:	b1 0b       	sbc	r27, r17
     f7a:	21 60       	ori	r18, 0x01	; 1
     f7c:	1a 94       	dec	r1
     f7e:	e1 f6       	brne	.-72     	; 0xf38 <__udivmod64+0x4c>
     f80:	2e f4       	brtc	.+10     	; 0xf8c <__udivmod64+0xa0>
     f82:	94 01       	movw	r18, r8
     f84:	af 01       	movw	r20, r30
     f86:	be 01       	movw	r22, r28
     f88:	cd 01       	movw	r24, r26
     f8a:	00 0c       	add	r0, r0
     f8c:	08 95       	ret

00000f8e <__negdi2>:
     f8e:	60 95       	com	r22
     f90:	70 95       	com	r23
     f92:	80 95       	com	r24
     f94:	90 95       	com	r25
     f96:	30 95       	com	r19
     f98:	40 95       	com	r20
     f9a:	50 95       	com	r21
     f9c:	21 95       	neg	r18
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	4f 4f       	sbci	r20, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	6f 4f       	sbci	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__prologue_saves__>:
     fae:	2f 92       	push	r2
     fb0:	3f 92       	push	r3
     fb2:	4f 92       	push	r4
     fb4:	5f 92       	push	r5
     fb6:	6f 92       	push	r6
     fb8:	7f 92       	push	r7
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
     fd6:	ca 1b       	sub	r28, r26
     fd8:	db 0b       	sbc	r29, r27
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	09 94       	ijmp

00000fe6 <__epilogue_restores__>:
     fe6:	2a 88       	ldd	r2, Y+18	; 0x12
     fe8:	39 88       	ldd	r3, Y+17	; 0x11
     fea:	48 88       	ldd	r4, Y+16	; 0x10
     fec:	5f 84       	ldd	r5, Y+15	; 0x0f
     fee:	6e 84       	ldd	r6, Y+14	; 0x0e
     ff0:	7d 84       	ldd	r7, Y+13	; 0x0d
     ff2:	8c 84       	ldd	r8, Y+12	; 0x0c
     ff4:	9b 84       	ldd	r9, Y+11	; 0x0b
     ff6:	aa 84       	ldd	r10, Y+10	; 0x0a
     ff8:	b9 84       	ldd	r11, Y+9	; 0x09
     ffa:	c8 84       	ldd	r12, Y+8	; 0x08
     ffc:	df 80       	ldd	r13, Y+7	; 0x07
     ffe:	ee 80       	ldd	r14, Y+6	; 0x06
    1000:	fd 80       	ldd	r15, Y+5	; 0x05
    1002:	0c 81       	ldd	r16, Y+4	; 0x04
    1004:	1b 81       	ldd	r17, Y+3	; 0x03
    1006:	aa 81       	ldd	r26, Y+2	; 0x02
    1008:	b9 81       	ldd	r27, Y+1	; 0x01
    100a:	ce 0f       	add	r28, r30
    100c:	d1 1d       	adc	r29, r1
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	ed 01       	movw	r28, r26
    101a:	08 95       	ret

0000101c <__cmpdi2_s8>:
    101c:	00 24       	eor	r0, r0
    101e:	a7 fd       	sbrc	r26, 7
    1020:	00 94       	com	r0
    1022:	2a 17       	cp	r18, r26
    1024:	30 05       	cpc	r19, r0
    1026:	40 05       	cpc	r20, r0
    1028:	50 05       	cpc	r21, r0
    102a:	60 05       	cpc	r22, r0
    102c:	70 05       	cpc	r23, r0
    102e:	80 05       	cpc	r24, r0
    1030:	90 05       	cpc	r25, r0
    1032:	08 95       	ret

00001034 <_exit>:
    1034:	f8 94       	cli

00001036 <__stop_program>:
    1036:	ff cf       	rjmp	.-2      	; 0x1036 <__stop_program>
